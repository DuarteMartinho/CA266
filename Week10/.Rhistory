length(unique(sample(1:50, 20, replace=T)))
length(unique(sample(1:50, 20, replace=T)))
length(unique(sample(1:50, 20, replace=T)))
length(unique(sample(1:50, 20, replace=T)))
length(unique(sample(1:50, 20, replace=T)))
length(unique(sample(1:50, 20, replace=T)))
length(unique(sample(1:50, 20, replace=T)))
length(unique(sample(1:50, 20, replace=T)))
length(unique(sample(1:50, 20, replace=T)))
length(unique(sample(1:50, 20, replace=T)))
length(unique(sample(1:50, 20, replace=T)))
length(unique(sample(1:50, 20, replace=T)))
length(unique(sample(1:50, 20, replace=T)))
length(unique(sample(1:50, 20, replace=T)))
length(unique(sample(1:50, 20, replace=T)))
length(unique(sample(1:50, 20, replace=T)))
length(unique(sample(1:50, 20, replace=T)))
length(unique(sample(1:50, 20, replace=T)))
length(unique(sample(1:50, 20, replace=T)))
length(unique(sample(1:50, 20, replace=T)))
num_ps <- 0
for (i in 1:1000)
{
num_ps[i] = length(unique(sample(1:50, 20, replace=T)))
}
histogram(num_ps)
hist(num_ps)
length(num_ps[num_ps==20])
26 x 36 x 36 x 36 x 36
26 * 36 * 36 * 36 * 36
total_possible_passwords <- 26 x 36 x 36 x 36 x 36
total_possible_passwords <- 26 * 36 * 36 * 36 * 36
password_start_consants <- 5 * 36 * 36 * 36 * 36
password_start_consants / total_possible_passwords
1 - 0.1923077
password_end_even <- 26 * 36 * 36 * 36 * 4
1 - (password_end_even / total_possible_passwords)
password_start_consants <- 21 * 36 * 36 * 36 * 36
password_start_consants / total_possible_passwords
password_end_even <- 36 * 36 * 36 * 36 * 4
password_end_even / total_possible_passwords
password_end_even <- 26 * 36 * 36 * 36 * 4
password_end_even / total_possible_passwords
password_end_even <- 26 * 36 * 36 * 36 * 5
password_end_even / total_possible_passwords
> password_start_consants <- 21 * 36 * 36 * 36 * 36
> password_end_even <- 26 * 36 * 36 * 36 * 5
> password_start_consants_end_even <- 21 * 36 * 36 * 36 * 5
password_start_consants <- 21 * 36 * 36 * 36 * 36
password_end_even <- 26 * 36 * 36 * 36 * 5
password_start_consants_end_even <- 21 * 36 * 36 * 36 * 5
possiblePasswords <- password_start_consants_end_even + password_start_consants + password_end_even
possiblePasswords <- password_start_consants + password_end_even - password_start_consants_end_even
total = possiblePasswords / total_possible_passwords
total
x <= a:``
x <= a:z
x <- a:z
letter = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')
letter_numbers = c(letters, 0:9)
all_passwords = sample(letter_numbers, 4,replace=TRUE)
all_passwords = sample(letter_numbers, 5, replace=TRUE)
all_passwords = sample(letter_numbers, 5, replace=TRUE)
for i in 100000
for i in 100000
print(i)
for i in 100000
print(i)
i = 0
for i in 100000
print(i)
for (i in 1:100000)
print(i)
letter = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')
letter_numbers = c(letters, 0:9)
all_passwords = sample(letter_numbers, 5, replace=TRUE)
for (i in 1:100000)
password = sample(letter_numbers, 5, replace=TRUE)
password_rev = rev(password)
if (identical(password, password_rev)) total <- total + 1
for (i in 1:100000)
password = sample(letter_numbers, 5, replace=TRUE)
password_rev = rev(password)
if (identical(password, password_rev)) total <- total + 1
all_passwords = sample(letter_numbers, 5, replace=TRUE)
for (i in 1:100000)
password = sample(letter_numbers, 5, replace=TRUE)
password_rev = rev(password)
if (identical(password, password_rev)) total <- total + 1
for (i in 1:100000)
password = sample(letter_numbers, 5, replace=TRUE)
password_rev = rev(password)
if (identical(password, password_rev)) total <- total + 1
for (i in 1:100000) {
password = sample(letter_numbers, 5, replace=TRUE)
password_rev = rev(password)
if (identical(password, password_rev)) {
total <- total + 1
}
}
total = 0
for (i in 1:100000) {
password = sample(letter_numbers, 5, replace=TRUE)
password_rev = rev(password)
if (identical(password, password_rev)) {
total <- total + 1
}
}
totsl
total
for (i in 1:100000) {
password = sample(letter_numbers, 5, replace=TRUE)
password_rev = rev(password)
if (identical(password, password_rev)) {
total <- total + 1
}
print(i)
}
total = 0
for (i in 1:100000) {
password = sample(letter_numbers, 5, replace=TRUE)
password_rev = rev(password)
if (identical(password, password_rev)) {
total <- total + 1
}
print(i)
}
total
total = 0
for (i in 1:100000) {
password = sample(letter_numbers, 5, replace=TRUE)
password_rev = rev(password)
if (identical(password, password_rev)) {
total <- total + 1
}
print(i)
}
total
total = 0
for (i in 1:100000) {
password = sample(letter_numbers, 5, replace=TRUE)
password_rev = rev(password)
if (identical(password, password_rev)) {
total <- total + 1
}
print(i)
}
total
total = 0
for (i in 1:10000000) {
password = sample(letter_numbers, 5, replace=TRUE)
password_rev = rev(password)
if (identical(password, password_rev)) {
total <- total + 1
}
print(i)
}
total
sprintf("%.20f", total)
tries = 10000000
sprintf("%.20f", total / tries)
password_1 = sample(letter, 1, replace=TRUE)
password_2 = sample(letter_numbers, 4, replace=TRUE)
password = c(password_1, password_2)
password_1 = sample(letter, 1, replace=TRUE)
password_2 = sample(letter_numbers, 4, replace=TRUE)
password = c(password_1, password_2)
password_1 = sample(letter, 1, replace=TRUE)
password_2 = sample(letter_numbers, 4, replace=TRUE)
password = c(password_1, password_2)
password_1 = sample(letter, 1, replace=TRUE)
password_2 = sample(letter_numbers, 4, replace=TRUE)
password = c(password_1, password_2)
password_1 = sample(letter, 1, replace=TRUE)
password_2 = sample(letter_numbers, 4, replace=TRUE)
password = c(password_1, password_2)
total = 0
tries = 10000000
for (i in 1:tries) {
password_1 = sample(letter, 1, replace=TRUE)
password_2 = sample(letter_numbers, 4, replace=TRUE)
password = c(password_1, password_2)
password_rev = rev(password)
if (identical(password, password_rev)) {
total <- total + 1
}
print(i)
}
sprintf("%.20f", total / tries)
help
help Plot(0)
help plot(0)
plot(0)
plot()
plot(1, 0)
plot(4444, 0)
plot(4444, 5555555555)
c
clear
x <- 5
val <- .97
val ^ x
x <- 1:5
plot(x, val ^ x, "Number of components", "Reliability")
plot(x, val ^ x, xlab ="Number of components", ylab ="Reliability")
x <- 5
x <- 1:5
val <- .97
plot(x, (1 - val) ^ x, xlab ="Number of components", ylab ="Reliability")
plot(x, 1 - (1 - val) ^ x, xlab ="Number of components", ylab ="Reliability")
c1 <- .95
c2 <- .95
c3 <- 70
c4 <- .75
c3 <- .70
c5 <- .9
c1 * c2 * ((1 - c3) ^ 3 ) * ((1 - c4) ^ 2) * c5
c1 * c2 * ((1 - (1 - c3)) ^ 3 ) * ((1 - (1 - c4)) ^ 2) * c5
rel <- c1 * c2 * ((1 - (1 - c3)) ^ 3 ) * ((1 - (1 - c4)) ^ 2) * c5
0.5 ^ 2
0.5 ^ 3\
0.5 ^ 3
1 - (0.5 ^ 3)
1 - (0.5 ^ 4)
1 - (0.5 ^ 40)
1 - (0.5 ^ 50)
1 - (0.5 ^ 30)
1 - (0.5 ^ 20)
1 - (0.5 ^ 21)
1 - (0.5 ^ 22)
1 - (0.5 ^ 23)
1 - (0.5 ^ 24)
1 - (0.5 ^ 25)
x <- 1:30
y <- 1 - (0.5 ^ x)
plot(x, y, xlab = "Gain in Reliability", ylab = "No of Additional Components")
(0.5 ^ x)
y <- (0.5 ^ x)
plot(x, y, xlab = "Gain in Reliability", ylab = "No of Additional Components")
plot(x, y, xlab = "Gain in Reliability", ylab = "No of Additional Components", type=’o’)
plot(x, y, xlab = "Gain in Reliability", ylab = "No of Additional Components", type='o')
x <- 1:12
y <- .92 ^ x
plot(x, y)
plot(x, y, type='o')
plot(x, 1-(1-.9^2)^x, xlab = "Number of Subsystems", ylab = "Reliability")
plot(x, 1-(1-.9^2)^x, xlab = "Number of Subsystems", ylab = "Reliability")
abline(1, 0)
y <- .92
plot(x, 1-(1-y^2)^x, xlab = "Number of Subsystems", ylab = "Reliability")
c
clear
wealth <- c(80, 110, 110, 70, 120, 90, 110)
prob <- c(0.09, 0.19, 0.17, 0.08, 0.19, 0.13, 0.15)
sum(prob)
mean <- siu
mean <- sum(wealth * prob)
mena
mena
mean
variance <- sum((wealth - mean)^2 * prob)
variance
> wealthToptown <- c(70, 120, 90, 110)
> probToptown <- c(0.08, 0.19, 0.13, 0.15)
> sum(probToptown)
> probToptown = probToptown/sum(probToptown)
> wealthToptown <- c(70, 120, 90, 110)
> probToptown <- c(0.08, 0.19, 0.13, 0.15)
> sum(probToptown)
> probToptown = probToptown/sum(probToptown)
wealthToptown <- c(70, 120, 90, 110)
probToptown <- c(0.08, 0.19, 0.13, 0.15)
sum(probToptown)
probToptown = probToptown/sum(probToptown)
sum(probToptown)
meanToptown <- sum(wealthToptown * probToptown)
meanToptown
varianceToptown <- sum((wealthToptown - meanToptown)^2 * probToptown)
varianceToptown
wealthToptown <- c(70, 120, 90, 110)
probToptown <- c(0.08, 0.19, 0.13, 0.15)
sum(probToptown)
probToptown = probToptown/sum(probToptown)
p_m_given_t = sum( probToptown[wealthToptown>100] )
p_m_given_t
p_m <- sum( prob[wealth>100] )
p_t <- (.08 + .19 + .13 +.15) / 1
p_t_given_m <- ( p_m_given_t * p_t ) / p_m
p_t_given_m
plot(wealth, prob, xlab='Wealth of town', ylab='% Population')
Then attach the dataframe:
attach(simp)
simp <- read.csv("~/Desktop/DCU/Year2/Semester1/CA266/Week7/simpsons_episodes.csv", header=T)
attach(simp)
colnames(simp)
mean <- sum(simp["imdb_rating"])
mean <- sum(simp["imdb_rating"])
mean <- sum(simp[imdb_rating])
mean <- sum(imdb_rating)
mean <- sum(imdb_rating, na.tm)
mean <- sum(imdb_rating, na.rm)
mean <- sum(imdb_rating, na.rm=T)
mean <- mean(imdb_rating, na.rm=T)
sd <- sd(imdb_rating, na.rm=T)
hist(imdb_rating)
hist(imdb_rating, breaks=c(0:10))
hist(imdb_rating)
hist(imdb_rating, breaks=c(0:10))
par(mfrow=0,2)
par(mrow=0,2)
par(frow=0,2)
par(mfrow=c(0,2))
par(mfrow=c(2,1))
hist(imdb_rating[season > 1 & season <= 10], breaks=c(5:10),), main='Comparing
distribution of ratings from Seasons 1-10 (top) and Season 11-20 (bottom) ',
xlab='IMDB Rating')
hist(imdb_rating[season > 1 & season <= 10], breaks=c(5:10), main='Comparing
distribution of ratings from Seasons 1-10 (top) and Season 11-20 (bottom) ',
xlab='IMDB Rating')
hist(imdb_rating[season > 10 & season <= 20], breaks=c(5:10),
xlab='IMDB Rating')
par(mfrow=c(2,1))
hist(imdb_rating[season > 1 & season <= 10], breaks=seg(5, 10, .5), main='Comparing
distribution of ratings from Seasons 1-10 (top) and Season 11-20 (bottom) ',
xlab='IMDB Rating')
hist(imdb_rating[season > 10 & season <= 20], breaks=seg(5, 10, .5), main='',
xlab='IMDB Rating')
par(mfrow=c(2,1))
hist(imdb_rating[season > 1 & season <= 10], breaks=seq(5, 10, .5), main='Comparing
distribution of ratings from Seasons 1-10 (top) and Season 11-20 (bottom) ',
xlab='IMDB Rating')
hist(imdb_rating[season > 10 & season <= 20], breaks=seq(5, 10, .5), main='',
xlab='IMDB Rating')
seq(5, 10, .5)
c(5, 10)
c(5, 10)
c(5, 10)
boxplot(imdb_rating, ylab="")
par(mfrow=c(1,1))
boxplot(imdb_rating, ylab="")
par(mfrow=c(1,1))
Show a boxplot for the imdb ratings for season 10. Set the y limit to be from 6.5 to
8.5 (hint: use ylim)
par(mfrow=c(1,1))
boxplot(imdb_rating[season = 10], ylim=c(6.5, 8.5), ylab = "IMDB Rating")
par(mfrow=c(1,1))
boxplot(imdb_rating[season = 10], ylim=c(6.5, 8.5), ylab = "IMDB Rating")
par(mfrow=c(1,1))
boxplot(imdb_rating[season == 10], ylim=c(6.5, 8.5), ylab = "IMDB Rating")
avg()
avg <- 0
for (si in c(1:max(season)))
{
avg[si] = mean( imdb_rating[season == si], na.rm=T)
}
plot(avg, xlab='Season number', ylab='IMDB Rating', main='Simpsons
IMDB Rating over time', type='b')
avg_1_10 <- 0
avg_11_20 <- 0
for (si in c(1:10))
{
avg_1_10[si] = mean( imdb_rating[season == si], na.rm=T)
}
for (si in c(11:20))
{
avg_11_20[si] = mean( imdb_rating[season == si], na.rm=T)
}
avg_1_10 <- 0
avg_11_20 <- 0
for (si in c(1:10))
{
avg_1_10[si] = mean( imdb_rating[season == si], na.rm=T)
}
for (si in c(1:10))
{
avg_11_20[si] = mean( imdb_rating[season == si + 10], na.rm=T)
}
plot( avg_1_10, xlab='Season number', ylab='IMDB Rating',
main='Simpsons IMDB Rating over time', type='o', col='green')
points(avg_11_20, type='o', col='red')
avg_1_10 <- 0
avg_11_20 <- 0
for (si in c(1:max(season)))
{
avg_1_10[si] = mean( imdb_rating[season == si & number_in_season<10
& number_in_season >= 1], na.rm=T )
avg_11_20[si] = mean( imdb_rating[season == si &
number_in_season>=10 & number_in_season < 20], na.rm=T )
}
plot( avg_1_10, xlab='Season number', ylab='IMDB Rating', main='Simpsons IMDB Rating over time', type='o', col='green')
points(avg_11_20, type='o', col='red')
plot( number_in_season[season == 2], us_viewers_in_millions[season == 2],
xlab='Episode number in Season 2', ylab='US viewers (in millions) ')
abline(lm(us_viewers_in_millions[season == 2] ~ number_in_season[season == 2]))
12) Use a boxplot to visualise the relationship between “imdb_rating” and “season” Hint:
you must use two parameters in your command separated by ~
Examples: boxplot(data1 ~ data2)\
boxplot(imdb_rating ~ season)
which.max(imdb_rating)
which.max( tapply(imdb_rating, season, mean, rm.na=T) )
attach(chickwts)
chickwts
attach(chickwts)
chickwts
chickwts[feed]
chickwts['feed]
chickwts['feed']
chickwts["feed"]
boxplot()
boxplot(chickwts["feed"])
boxplot(weight ~ feed)
boxplot(weight ~ feed, xlab ="x")
boxplot(weight ~ feed, xlab ="Feed")
boxplot(weight ~ feed, xlab ="Feed", ylab = "Weight")
boxplot(weight ~ feed, xlab ="Feed", ylab = "Weight", main = "Boxplot for each feed type")
par(mfrow=c(2,1))
boxplot(weight ~ feed, xlab ="Feed", ylab = "Weight", main = "Boxplot for each feed type")
boxplot(weight ~ feed, xlab ="Feed", ylab = "Weight", main = "Boxplot for each feed type")
par(mfrow=c(2,1))
hist()
hist(feed="sunflower")
hist(chickwts[feed="sunflower"])
hist(chickwts[feed])
hist(chickwts[feed])
hist(chickwts[])
hist(chickwts)
hist(chickwts["feed"="weight"])
hist(chickwts["feed = weight"])
hist(weight ~ feed = "sunflower")
hist(weight ~ feed)
hist(weight[feed = "sunflower"])
hist(weight[feed = "sunflower"], breaks = 5)
hist(weight[feed = "sunflower"], breaks = c(5, 10))
hist(weight[feed = "sunflower"], breaks = c(1, 10))
hist(weight[feed = "sunflower"], breaks = c(1, 10))
hist(weight[feed = "sunflower"], breaks = c(1, max(weight)))
hist(weight[feed = "sunflower"], breaks = c(1, max(weight), 50))
hist(weight[feed = "sunflower"], breaks = seq(1, max(weight), 50))
hist(weight[feed = "sunflower"], breaks = seq(1, max(weight), 50))
hist(weight[feed == "sunflower"], breaks = seq(1, max(weight), 50))
hist(weight[feed == "sunflower"], breaks = seq(1, max(weight) + 50, 50))
hist(weight[feed == "sunflower"], breaks = seq(1, max(weight) + 55, 50))
hist(weight[feed == "sunflower"], breaks = seq(1, max(weight) + 100, 50))
hist(weight[feed == "sunflower"], breaks = seq(1, max(weight) + 100, 25))
hist(weight[feed == "sunflower"], breaks = seq(1, max(weight) + 100, 50))
hist(weight[feed == "sunflower"], breaks = seq(1, max(weight) + 100, 50))
hist(weight[feed == "sunflower"], breaks = seq(1, max(weight) + 100, 50), ylab = "Frequency", xlab = "Weight", main = "Histogram of Weight for Sunflower feed")
hist(weight[feed == "sunflower"], breaks = seq(1, max(weight) + 100, 50), ylab = "Frequency", xlab = "Weight", main = "Histogram of Weight for Sunflower feed")
hist(weight[feed == "horsebean"], breaks = seq(1, max(weight) + 100, 50), ylab = "Frequency", xlab = "Weight", main = "Histogram of Weight for Horsebean feed")
tapply(weight, feed, mean)
tapply(weight, feed, var)
nWeight -> weight[feed == "linseed" | feed == "sunflower"]
nWeight - weight[feed == "linseed" | feed == "sunflower"]
nWeight <- weight[feed == "linseed" | feed == "sunflower"]
weightLess <- nWeight <
for i in nWeight
for i in nWeight {}
for (i in nWeight) {}
for (i in nWeight) {
sprintf(i)
}
for (i in nWeight) {
x <- i
}
for (i in nWeight) {
x <- weight[i]
}
for (i in nWeight) {
x <- nWeight[i]
}
for (i in nWeight) {
print(i)
}
for (i in nWeight) {
if (i < 159) {
print(i)
}
}
lenght(weight)
length(weight)
totalChicks <- length(weight)
totalChicks
weightLessThan159 <- []
weightLessThan159
count = 0
for (i in nWeight) {
if (i < 159) {
count = count + 1
}
}
c
count
percentage <- count / totalChicks
percentage <- count / totalChicks * 100
percentage
n_weights[n_weights < 159]
nWeights[nWeights < 159]
nWeight[nWeight < 159]
c
setwd("~/Desktop/DCU/Year2/Semester1/CA266/Week10")
sleep
sleep
x <- 1
x
“ToothGrowth”
ToothGrowth
attach(ToothGrowth)
attach(ToothGrowth)
attach(ToothGrowth)
ToothGrowth
attach(ToothGrowth)
attach(ToothGrowth)
